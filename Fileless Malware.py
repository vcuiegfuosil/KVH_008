import tkinter as tk
from tkinter import ttk
from ttkbootstrap import Style
import psutil

def scan():
    # Perform the scan logic here
    scan_results = perform_scan()
    
    # Display the scan results in the text box
    results_text.delete("1.0", tk.END)  # Clear previous results
    results_text.insert(tk.END, scan_results)

def quarantine():
    # Perform the quarantine logic here
    # Placeholder logic - display a message in the text box
    results_text.delete("1.0", tk.END)  # Clear previous results
    results_text.insert(tk.END, "Quarantine operation performed.")

def logout():
    # Perform the logout logic here
    # Placeholder logic - display a message in the text box
    results_text.delete("1.0", tk.END)  # Clear previous results
    results_text.insert(tk.END, "Logout operation performed.")

def perform_scan():
    detected_malware = []

    processes = psutil.process_iter()
    for process in processes:
        try:
            # Get process details
            process_info = process.as_dict(attrs=['pid', 'name', 'memory_info', 'connections'])

            # Criteria 1: Code Injection Techniques
            if process_info['memory_info'].rss > 1e9:  # Check for large memory usage
                detected_malware.append(f"Process {process_info['name']} (PID: {process_info['pid']}) may be using code injection.")

            # Criteria 2: PowerShell and WMI Activity
            if 'powershell' in process_info['name'].lower():
                detected_malware.append(f"PowerShell process detected: {process_info['name']} (PID: {process_info['pid']})")

            # Criteria 3: API Function Calls
            suspicious_api_calls = ['VirtualAllocEx', 'WriteProcessMemory', 'CreateRemoteThread']
            for connection in process_info['connections']:
                if any(api_call in connection.status.lower() for api_call in suspicious_api_calls):
                    detected_malware.append(f"Suspicious API call detected in process {process_info['name']} (PID: {process_info['pid']}): {connection.status}")

            # Criteria 4: Privilege Escalation Techniques
            if 'admin' in process_info['name'].lower():
                detected_malware.append(f"Potential privilege escalation attempt in process {process_info['name']} (PID: {process_info['pid']})")

            # Criteria 5: Persistence Mechanisms
            if 'registry' in process_info['name'].lower():
                detected_malware.append(f"Suspicious registry modification detected in process {process_info['name']} (PID: {process_info['pid']})")

            # Criteria 6: Network Behavior
            #for connection in process_info['connections']:
                #if 'malicious_ip' in connection.remote_ip:
                    #detected_malware.append(f"Process {process_info['name']} (PID: {process_info['pid']}) is communicating with a suspicious IP address: {connection.remote_ip}")

             # Criteria 7: Suspicious File Operations
                        
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    if detected_malware:
        scan_results = "Detected fileless malware:\n\n"
        scan_results += '\n'.join(detected_malware)
    else:
        scan_results = "No fileless malware detected."

    return scan_results

# Create the main window
window = tk.Tk()
window.title("SANVYY Fileless Malware Antivirus")

# Apply the theme from ttkbootstrap
style = Style(theme='yeti')

# Create and pack the welcome label
welcome_label = ttk.Label(window, text="Welcome, [Ateequa]!", style="info.TLabel")
welcome_label.pack()

# Create and pack the scan and quarantine buttons
scan_button = ttk.Button(window, text="Scan", command=scan, style="primary.TButton")
scan_button.pack(side=tk.LEFT, padx=10)

quarantine_button = ttk.Button(window, text="Quarantine", command=quarantine, style="danger.TButton")
quarantine_button.pack(side=tk.LEFT, padx=10)

# Create and pack the scan results and logs section
results_text = tk.Text(window, height=10, width=50)
results_text.pack(pady=10)

# Create and pack the logout button
logout_button = ttk.Button(window, text="Logout", command=logout, style="secondary.TButton")
logout_button.pack(pady=10)

# Start the application's main event loop
window.mainloop()
